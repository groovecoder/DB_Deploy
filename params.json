{"name":"PEAR:DB::Deploy","tagline":"Pear::DbDeploy is a pear package to employ dbdeploy as a database change-management tool. (See http://dbdeploy.com/)","body":"## Intro\r\ndbdeploy is a Database Change Management tool. It's for developers or DBAs who want to evolve their database design - or refactor their database - in a simple, controlled, flexible and frequent manner. See [dbdeploy.com](http://dbdeploy.com/) for more.\r\n\r\n## Installation\r\nDownload the DB_Deploy .tgz file from [the SourceForge project](http://sourceforge.net/project/peardbdeploy)\r\n\r\nInstall with pear command::\r\n    pear install DB_Deploy-0.9.2.tgz\r\n\r\n## Project Setup\r\nTo use dbdeploy, you must follow certain conventions in your project directory (these are not all configurable, yet):\r\n\r\n1. Create a table called `changelog` in the database\r\n2. Create a directory called `dbdeploy`\r\n3. Within the `dbdeploy` directory, create a `dbdeploy.ini` file for configuration\r\n4. Within the `dbdeploy` directory, create another directory called `deltas`\r\n5. Within the `deltas` directory, SQL script files for deployment and rollback of DB changes\r\n\r\nEach of these conventions are explained in more detail below. You can also see [a small example project](http://peardbdeploy.sourceforge.net/example_proj/).\r\n\r\n### changelog table\r\ndbdeploy relies on the following table in the database in order to track which revisions have deployed to the DB.\r\n```\r\nCREATE TABLE changelog ( change_number bigint(20) NOT NULL, delta_set varchar(10) NOT NULL, start_dt timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP, complete_dt timestamp NULL default NULL, applied_by varchar(100) NOT NULL, description varchar(500) NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n```\r\n\r\nNote: this SQL is for MySQL, but the same table can be built in any DB. Just ensure the column names are the same, and the types are comparable.\r\n\r\n### .ini\r\n.ini config file(s) is/are used to specify settings for DB_Deploy. You can keep multiple .ini files to connect to multiple databases - e.g., dev.ini, test.ini, prod.ini. The structure of the file should be as follows:\r\n\r\n```\r\n[dbdeploy]\r\n\turl = sqlite:./db.sqlite\r\n\tuserid = dbdeploy\r\n\tpassword = dbdeploy\r\n\toutputFile = dbdeploy/dbdeploy_deploy.sql\r\n\tundoOutputFile = dbdeploy/dbdeploy_undo.sql\r\n\tdeltaDir = dbdeploy/deltas\r\n```\r\n* **url** - PDO url for connection to the database\r\n* **username** - username for connection to the database\r\n* **password** - password for connection to the database\r\n* **outputFile** - name of the file which will hold the aggregated SQL for deploying all deltas\r\n* **undoOutputFile** - name of the file which will hold the aggregated SQL for rolling back all deltas\r\n* **deltaDir** - the directory in which all delta files are stored\r\n\r\nNote: Only a url value is required; DB_Deploy will use the other values above by default. But you may specify your own values to override these defaults.\r\n\r\n### delta scripts\r\nPlace all delta scripts into the `dbdeploy/deltas` directory. You should follow the [rules for dbdeploy usage](http://dbdeploy.com/documentation/getting-started/rules-for-using-dbdeploy/)\r\n\r\n* Make sure that EVERY database modification is written as a delta script to be picked up by dbdeploy.\r\n* Follow the naming convention for delta scripts. Script names must begin with a number that indicates the order in which it should be run (1.sql gets run first, then 2.sql and so on). You can optionally add a comment to the file name to describe what the script does (eg 1 Created the CustomerAddress table.sql) the comment will get written to the schema version table as the script is applied.\r\n* You can optionally add an undo section to your script. Write the script so it performs the do action first (eg create the CustomerAddress table) once all do actions have been scripted include the token `--//@UNDO`` on a new line. Include the undo steps after this token.\r\n* If you realise that you've made a mistake in a delta script that's been checked in then consider carefully how to fix it.\r\n\r\n## Using dbdeploy\r\nAssumming you have followed the instructions and rules as above, you can now roll up your DB changes by simply using the `dbdeploy` command from within your project directory.\r\n\r\n```\r\n$ dbdeploy -c dbdeploy/example_proj_prod.ini\r\nsetting configFile to: dbdeploy/example_proj_prod.ini\r\nGetting applied changed numbers from DB at: sqlite:./prod.sqlite\r\nCurrent db revision: 0\r\nCreating deploy SQL file, dbdeploy/dbdeploy_deploy.sql\r\n        adding deploy SQL from 001_create_test_table.sql ... done.\r\n        adding deploy SQL from 002_add_test_record.sql ... done.\r\nCreating undo SQL file, dbdeploy/dbdeploy_undo.sql\r\n        adding undo SQL from 002_add_test_record.sql ... done.\r\n        adding undo SQL from 001_create_test_table.sql ... done.\r\n```\r\nIt will aggregate the SQL from the necessary delta script files, and create the output files as specified in the config file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}